
import logging
from telegram.ext import (Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters, RegexHandler,
                          ConversationHandler)
from telegram import (ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup)
from x10project import (AccountCreator, PortfolioMonitor)



class BotHelper:
    def __init__(self):
        self.accCreator = AccountCreator()
        self.availAcc = self.accCreator.getAvailiableAccounts() 
        self.updater = Updater(token='345714559:AAFattmHvDEHenQLbI5wgTvE0Lhord_aYpQ')
        self.portfolioMonitor = PortfolioMonitor()
        dispatcher = self.updater.dispatcher
        logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)


        self.MAIN_MENU = 0
           
        main_menu_keyboard = [['‚ò†Ô∏è Account', 'üí∏ PortfolioInfo'],
                            ['üîí Item3','üîí Item4']]
        
        #–ú–∞—Ä–∫–∞–ø –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        self.main_menu_markup = ReplyKeyboardMarkup(main_menu_keyboard, one_time_keyboard=False)
        #–ú–∞—Ä–∫–∞–ø –¥–ª—è –º–µ–Ω—é –≤ –ø—É–Ω–∫—Ç–µ Account
        keyboard = [[InlineKeyboardButton("–ê–Ω–¥—Ä–µ–π", callback_data='andrey'),
                 InlineKeyboardButton("–†—É—Å—Ç–∞–º", callback_data='rustam')],

                [InlineKeyboardButton("–ò–≥–æ—Ä—å", callback_data='igor'), 
                InlineKeyboardButton("–ê—Ä—Å–µ–Ω–∏–π", callback_data='arsen'),
                InlineKeyboardButton("–ü–æ–∫—Ä–æ–≤", callback_data='pokrov'),
                ]]
        self.account_reply_markup = InlineKeyboardMarkup(keyboard)
        

        #dispatcher.add_handler(CommandHandler('start', self._startCommand))
        dispatcher.add_handler(CommandHandler('start', self._startCommand))
        dispatcher.add_handler(RegexHandler('^(.*Account)$',  self._accountItemChoose))
        dispatcher.add_handler(RegexHandler('^(.*PortfolioInfo)$', self._portfolioInfoItemChoose))
        dispatcher.add_handler(RegexHandler('^(.*Item3|.*Item4)$', self._commandItemChoose))
        dispatcher.add_handler(CallbackQueryHandler(self._button))  
        dispatcher.add_error_handler(self.error)
        dispatcher.add_handler(MessageHandler(Filters.command, self._unknownCommand))
    
    
    
    def error(self, bot, update, error):
        """Log Errors caused by Updates."""
        print('Update "%s" caused error "%s"', update, error)


    #–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    def _startCommand(self, bot, update):
        user = update.message.from_user
          
        update.message.reply_text("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, %s!  –í—ã–±–∏—Ä–∞–π —á—Ç–æ –ø–æ–∂–µ–ª–∞–µ—à—å..." % (user["first_name"]),
                                reply_markup = self.main_menu_markup)
        
     
    
    
    def _accountItemChoose(self, bot, update):
        bot.send_message(text='–í—ã–±–µ—Ä–∏ –∞–∫–∫–∞—É–Ω—Ç:', chat_id=update.message.chat_id, reply_markup=self.account_reply_markup)
        #update.message.reply_text('–í—ã–±–µ—Ä–∏ –∞–∫–∫–∞—É–Ω—Ç:', reply_markup=self.account_reply_markup)
        
        
    def _portfolioInfoItemChoose(self, bot, update):
        bot.send_message(text=self.portfolioMonitor.CheckPortfolio(returnText=True), 
                         chat_id=update.message.chat_id, 
                         reply_markup=self.main_menu_markup)
        
    
    def _commandItemChoose(self, bot, update):
        bot.send_message(text='–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Ç–µ–±–µ –æ—Ç–≤–µ—Ç–∏—Ç—å...(', chat_id=update.message.chat_id, reply_markup=self.main_menu_markup)
       
    
    #–æ–±—Ä–∞–±–æ—Ç—á–∏–∫    
    def _button(self, bot, update):    
        query = update.callback_query
        acc_code = query.data
        
        msg = '' if acc_code in self.availAcc else "–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –º–Ω–µ –Ω—É–∂–µ–Ω –∞—Ä–≥—É–º–µ–Ω—Ç. –û–¥–Ω–æ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π: " + ', '.join(self.availAcc)

        try:
            if msg == '':
                msg = self.accCreator.getAccount(acc_code).getCommonAccountInfo() if acc_code in self.availAcc else "–¢–∞–∫–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —è –Ω–µ –∑–Ω–∞—é("
        except: 
            msg = "‚ùå –ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"
        
        bot.edit_message_text(text=msg,
                          chat_id=query.message.chat_id,
                          message_id=query.message.message_id,
                    reply_markup = self.account_reply_markup)

 
        
    #–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /caps    
    def _helpCommand(self, bot, update):
        text_commands = '1. /acc [{:s}] - –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É \n'.format(', '.join(self.availAcc))
        bot.send_message(chat_id=update.message.chat_id, text=text_commands)

    
    #–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
    def _unknownCommand(self, bot, update):
        bot.send_message(chat_id=update.message.chat_id, text="–Ø –Ω–µ –∑–Ω–∞—é —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ãüòî")
    
    
    #–ó–∞–ø—É—Å–∫ —Å–ª—É—à–∞—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞    
    def start(self): 
        self.updater.start_polling()
        # Run the bot until you press Ctrl-C or the process receives SIGINT,
        # SIGTERM or SIGABRT. This should be used most of the time, since
        # start_polling() is non-blocking and will stop the bot gracefully.
        self.updater.idle()